package es.gonzagile.jmockload.generators.dumb;

import es.gonzagile.jmockload.constraints.FieldConstraint;
import es.gonzagile.jmockload.generators.ValueGenerator;

import java.lang.reflect.Array;
import java.util.List;
import java.util.Random;

/**
 * Sets an Array of objects with values generated by the ValueGenerator to the specified field. The array's len can be set,
 * as well as a range of min and max possible array's lengths.
 */
public final class RandomArrayGenerator<T> implements ValueGenerator<T[]> {
    private final Class<T> componentType;
    private final ValueGenerator<T> valuesGenerator;
    private final int minlen;
    private final int maxlen;
    private final Random r = new Random();

    /**
     * Constructor that generates an array of objects with a default size of 2.
     * @param componentType The class of the object stored in the array.
     * @param valuesGenerator The ValueGenerator implementation to generate the values of the array.
     */
    public RandomArrayGenerator(Class<T> componentType, ValueGenerator<T> valuesGenerator) {
        this(componentType, valuesGenerator, 2, 2);
    }

    /**
     * Constructor that generates an array of random values, with a defined size.
     * @param componentType The class of the object stored in the array.
     * @param valuesGenerator The ValueGenerator implementation to generate the values of the array.
     * @param length The size of the array.
     */
    public RandomArrayGenerator(Class<T> componentType, ValueGenerator<T> valuesGenerator, int length) {
        this(componentType, valuesGenerator, length, length);
    }

    /**
     * Constructor that generates an array of random values, with a random size defined by the range [minlen, maxlen).
     * @param componentType The class of the object stored in the array.
     * @param valuesGenerator The ValueGenerator implementation to generate the values of the array.
     * @param minlen The minimum possible size of the array.
     * @param maxlen The maximus non-inclusive possible size of the array.
     */
    public RandomArrayGenerator(Class<T> componentType, ValueGenerator<T> valuesGenerator, int minlen, int maxlen) {
        if (componentType.isPrimitive()) {
            throw new IllegalArgumentException("Primitives are not allowed: " + componentType);
        } else if(minlen < 0 || maxlen < 0) {
            throw new IllegalArgumentException("Array size must be 0 or greater");
        }
        this.componentType = componentType;
        this.valuesGenerator = valuesGenerator;
        this.minlen = minlen;
        this.maxlen = maxlen;
    }

    @Override
    public T[] generate() {
        return generate(0, List.of());
    }

    @Override
    public T[] generate(int index) {
        return generate(index, List.of());
    }

    @Override
    public T[] generate(int index, List<FieldConstraint> constraints) {
        int len = minlen == maxlen ? minlen : r.nextInt(minlen, maxlen);
        T[] array = (T[]) Array.newInstance(componentType, len);
        for(int i = 0; i < len; i++) {
            array[i] = valuesGenerator.generate(i, constraints);
        }
        return array;
    }
}
