package es.gonzagile.jmockload.generators.dumb;

import es.gonzagile.jmockload.constraints.FieldConstraint;
import es.gonzagile.jmockload.generators.ValueGenerator;

import java.lang.reflect.Array;
import java.util.List;

/**
 * Sets a multidimensional Array with values generated by the ValueGenerator to the specified field. The Array will
 * have as many dimensions as "dimensions" values are passed to the constructor.
 */
public class RandomMultiDimensionalArrayGenerator<T> implements ValueGenerator<Object> {
    private final Class<?> componentType;
    private final ValueGenerator<T> valuesGenerator;
    private final int[] dimensions;

    /**
     * Constructor that generates a multidimensional array of primitives. The number of dimensions is set by the
     * amount of values passed as the dimensions param, and each dimension will have the size set by the dimension
     * param itself. For example: 2, 3, 4 will mean there will be 3 dimensions, the first one will have a size of 2,
     * the second one will have a size of 3 and the third one will have a size of 4.
     * @param componentType The type of the components stored in the array.
     * @param valuesGenerator The ValueGenerator implementation to generate the values of the array.
     * @param dimensions Both the amount of dimensions and the size of each one of them.
     */
    public RandomMultiDimensionalArrayGenerator(Class<T> componentType, ValueGenerator<T> valuesGenerator, int... dimensions) {
        if (componentType == null || valuesGenerator == null || dimensions == null || dimensions.length == 0) {
            throw new IllegalArgumentException("Invalid constructor params: no null values allowed, dimensions can't be empty");
        } else {
            for(int dimension : dimensions) {
                if (dimension <= 0) throw new IllegalArgumentException("Array size must be 1 or greater");
            }
        }
        this.componentType = componentType;
        this.valuesGenerator = valuesGenerator;
        this.dimensions = dimensions;
    }

    @Override
    public Object generate() {
        return this.generate(0, List.of());
    }

    @Override
    public Object generate(int index) {
        return this.generate(index, List.of());
    }

    @Override
    public Object generate(int index, List<FieldConstraint> constraints) {
        Object array = Array.newInstance(componentType, dimensions);
        fillArray(array, 0, constraints);
        return array;
    }

    private void fillArray(Object array, int level, List<FieldConstraint> constraints) {
        int length = Array.getLength(array);
        if (level == dimensions.length - 1) {
            for (int i = 0; i < length; i++) {
                Object value = valuesGenerator.generate(i, constraints);
                Array.set(array, i, value);
            }
        } else {
            for (int i = 0; i < length; i++) {
                Object subArray = Array.get(array, i);
                fillArray(subArray, level + 1, constraints);
            }
        }
    }
}
